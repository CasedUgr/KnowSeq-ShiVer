devtools::install_github("casedUGR/KnowSeq")
devtools::install_github("casedUGR/KnowSeq")
# ----- Semilla aleatoria para reproducibilidad -----
rm(list = ls())
set.seed(31415)
# Número de genes a seleccionar
numero_de_genes <- 50
# ----- Ruta de trabajo -----
# # Windows
# setwd("C:/Users/dredondo/Dropbox/Pública/Archivos - Máster Ciencia de Datos/asignaturas_hechas")
#
# # Mac
# #setwd("/Users/daniel/Dropbox/Transporte_interno/Máster/Ciencia de Datos/")
#
# # Carpeta de datos
# setwd("TFM/Analisis_higado/data/")
setwd("analisis_higado_data")
# Instalación de KnowSeq: (es una versión fija de GitHub)
# devtools::install_github("CasedUgr/KnowSeq", ref = "f59cb9e1cb02702697c208cf2c61c45d6e0b7a08", force = TRUE)
# Si hay problemas del tipo "Error: (converted from warning)" : Sys.setenv(R_REMOTES_NO_ERRORS_FROM_WARNINGS="true")
library(KnowSeq)     # Para trabajar con datos de transcriptómica de GDC Portal
library(dplyr)       # Para select, filter, pipes, ...
library(tictoc)      # Para medir tiempos con tic() y toc() a lo MATLAB
library(beepr)       # Para avisar con beeps cuando acaba un proceso
library(caret)       # Para machine learning
library(e1071)       # Para SVM
library(gplots)      # Para heatmaps
library(reshape2)    # Para melt
library(ggalluvial)  # Para diagrama de Sankey
# Lectura de sample_sheet
samplesInfo <- read.table("gdc_sample_sheet.2020-06-11.tsv", sep = "\t", header = T)
# Se elimina ".counts.gz" de samplesInfo, porque countsToMatrix luego añade la extensión
samplesInfo[,2] <- as.character(samplesInfo[,2])
for(i in 1:nrow(samplesInfo)){
samplesInfo[i,2] <- substr(samplesInfo[i,2], 1, nchar(samplesInfo[i, 2]) - 10)
}
# Comprobación de importación correcta
head(samplesInfo)
# Definición de parámetros
Run <- samplesInfo$File.Name
Path <- samplesInfo$File.ID
Class <- samplesInfo$Sample.Type
table(Class)
# Los casos que no son "Primary Tumor" o "Solid Tissue Normal" se eliminan de:
#    - El fichero gdc_sample_sheet
#    - El fichero gdc_manifest
#    - La carpeta de gdc_download
Path[which(Class %in% c("Metastatic", "Recurrent Tumor"))]
# Creación de dataframe
SamplesDataFrame <- data.frame(Run, Path, Class)
# Exportación a CSV de SamplesDataFrame
setwd(dir = "gdc_download/")
write.csv(SamplesDataFrame, file = "03_SamplesDataFrame.csv")
tic("countsToMatrix") # 85 segundos
countsInformation <- countsToMatrix("03_SamplesDataFrame.csv", extension = "counts")
toc()
countsMatrix <- countsInformation$countsMatrix
labels <- countsInformation$labels
countsMatrix
myAnnotation <- getGenesAnnotation(rownames(countsMatrix))
myAnnotation
rownames(countsMatrix) <- myAnnotation
rownames(countsMatrix) <- myAnnotation$external_gene_name
myAnnotation$external_gene_name
dim(myAnnotation)
length(rownames(countsMatrix))
rownames(countsMatrix)
countsMatrix
rownames(countsMatrix)
myAnnotation <- getGenesAnnotation(rownames(countsMatrix), attributes = "external_gene_name", filter = "external_gene_name")
myAnnotation
myAnnotation <- getGenesAnnotation(rownames(countsMatrix), attributes = "external_gene_name")
rownames(countsMatrix)
length(myAnnotation)
dim((myAnnotation)
dim(myAnnotation)
rownames(countsMatrix)
length(rownames(countsMatrix))
dim(myAnnotation)
is.na(rownames(countsMatrix))
is.na(rownames(countsMatrix)) %>% table
unique(rownames(countsMatrix)) %>% table
unique(rownames(countsMatrix)) %>% length
unique(rownames(countsMatrix)) %>% length
tic("calculateGeneExpressionValues") # 82 segundos
expressionMatrix <- calculateGeneExpressionValues(countsMatrix, myAnnotation, genesNames = TRUE)
toc()
myAnnotation <- getGenesAnnotation(rownames(countsMatrix))
tic("calculateGeneExpressionValues") # 82 segundos
expressionMatrix <- calculateGeneExpressionValues(countsMatrix, myAnnotation, genesNames = TRUE)
toc()
dim(expressionMatrix)
myAnnotation <- getGenesAnnotation(rownames(countsMatrix))
myAnnotation
myAnnotation$ensembl_gene_id
# En myAnnotation no están todos los genes de countsMatrix, pero si la mayoría
dim(myAnnotation)
dim(countsMatrix)
countsMatrix2 <- countsMatrix[! rownames(countsMatrix) %in% myAnnotation$ensembl_gene_id]
dim(countsMatrix2)
countsMatrix2 <- countsMatrix[! rownames(countsMatrix) %in% myAnnotation$ensembl_gene_id,]
dim(countsMatrix2)
countsMatrix2 <- countsMatrix[rownames(countsMatrix) %in% myAnnotation$ensembl_gene_id,]
dim(countsMatrix2)
myAnnotation <- getGenesAnnotation(rownames(countsMatrix))
# En myAnnotation no están todos los genes de countsMatrix, pero si la mayoría
dim(myAnnotation) #24747
dim(countsMatrix) #24983
countsMatrix2 <- countsMatrix[rownames(countsMatrix) %in% myAnnotation$ensembl_gene_id,]
dim(countsMatrix2)
countsMatrix2
rownames(countsMatrix) %in% myAnnotation$ensembl_gene_id
table(rownames(countsMatrix) %in% myAnnotation$ensembl_gene_id)
library(datatable)
library(data.table)
uniqueN(rownames(countsMatrix))
uniqueN(myAnnotation)
uniqueN(myAnnotation$ensembl_gene_id)
duplicated(myAnnotation$ensembl_gene_id)
myAnnotation$ensembl_gene_id[uplicated(myAnnotation$ensembl_gene_id)]
dmyAnnotation$ensembl_gene_id[uplicated(myAnnotation$ensembl_gene_id)]
myAnnotation$ensembl_gene_id[duplicated(myAnnotation$ensembl_gene_id)]
myAnnotation$ensembl_gene_id[duplicated(myAnnotation$ensembl_gene_id)] -> duplicados.mirar
myAnnotation[myAnnotation$ensembl_gene_id %in% duplicados.mirar]
myAnnotation[myAnnotation$ensembl_gene_id %in% duplicados.mirar,]
myAnnotation <- getGenesAnnotation(rownames(countsMatrix), attributes = "external_gene_name")
# En myAnnotation no están todos los genes de countsMatrix, pero si la mayoría
dim(myAnnotation) #24747
myAnnotation
uniqueN(myAnnotation)
# Quitamos duplicados
myAnnotation <- unique(myAnnotation)
dim(myAnnotation)
countsMatrix2 <- countsMatrix[rownames(countsMatrix) %in% myAnnotation$ensembl_gene_id,]
dim(countsMatrix2)
rownames(countsMatrix) <- myAnnotation$external_gene_name
rownames(countsMatrix2) <- myAnnotation$external_gene_name
countsMatrix2
labels
write.csv2(labels, file = paste0("higado_", numero_de_genes, "genes_labels.csv"), row.names = F)
write.csv2(countsMatrix2, file = paste0("higado_", numero_de_genes, "genes_countsMatrix.csv"))
write.csv2(labels, file = paste0("higado_", "genes_labels.csv"), row.names = F)
write.csv2(countsMatrix2, file = paste0("higado_", "genes_countsMatrix.csv"))
# ----- Semilla aleatoria para reproducibilidad -----
rm(list = ls())
set.seed(31415)
# Número de genes a seleccionar
numero_de_genes <- 50
# ----- Ruta de trabajo -----
# # Windows
# setwd("C:/Users/dredondo/Dropbox/Pública/Archivos - Máster Ciencia de Datos/asignaturas_hechas")
#
# # Mac
# #setwd("/Users/daniel/Dropbox/Transporte_interno/Máster/Ciencia de Datos/")
#
# # Carpeta de datos
# setwd("TFM/Analisis_higado/data/")
setwd("analisis_higado_data")
# ----- Carga de paquetes -----
# Instalación de KnowSeq: (es una versión fija de GitHub)
# devtools::install_github("CasedUgr/KnowSeq", ref = "f59cb9e1cb02702697c208cf2c61c45d6e0b7a08", force = TRUE)
# Si hay problemas del tipo "Error: (converted from warning)" : Sys.setenv(R_REMOTES_NO_ERRORS_FROM_WARNINGS="true")
library(KnowSeq)     # Para trabajar con datos de transcriptómica de GDC Portal
library(dplyr)       # Para select, filter, pipes, ...
library(tictoc)      # Para medir tiempos con tic() y toc() a lo MATLAB
library(beepr)       # Para avisar con beeps cuando acaba un proceso
library(caret)       # Para machine learning
library(e1071)       # Para SVM
library(gplots)      # Para heatmaps
library(reshape2)    # Para melt
library(ggalluvial)  # Para diagrama de Sankey
# ----- Preprocesamiento para adecuar ficheros a KnowSeq -----
# Lectura de sample_sheet
samplesInfo <- read.table("gdc_sample_sheet.2020-06-11.tsv", sep = "\t", header = T)
# Se elimina ".counts.gz" de samplesInfo, porque countsToMatrix luego añade la extensión
samplesInfo[,2] <- as.character(samplesInfo[,2])
for(i in 1:nrow(samplesInfo)){
samplesInfo[i,2] <- substr(samplesInfo[i,2], 1, nchar(samplesInfo[i, 2]) - 10)
}
# Comprobación de importación correcta
head(samplesInfo)
# Definición de parámetros
Run <- samplesInfo$File.Name
Path <- samplesInfo$File.ID
Class <- samplesInfo$Sample.Type
table(Class)
# Los casos que no son "Primary Tumor" o "Solid Tissue Normal" se eliminan de:
#    - El fichero gdc_sample_sheet
#    - El fichero gdc_manifest
#    - La carpeta de gdc_download
Path[which(Class %in% c("Metastatic", "Recurrent Tumor"))]
# Creación de dataframe
SamplesDataFrame <- data.frame(Run, Path, Class)
# Exportación a CSV de SamplesDataFrame
setwd(dir = "gdc_download/")
write.csv(SamplesDataFrame, file = "03_SamplesDataFrame.csv")
# ----- Unificación de ficheros en formato matriz -----
tic("countsToMatrix") # 85 segundos
countsInformation <- countsToMatrix("03_SamplesDataFrame.csv", extension = "counts")
toc()
# ----- La matriz de cuentas y las etiquetas se guardan -----
countsMatrix <- countsInformation$countsMatrix
labels <- countsInformation$labels
# ----- Se descargan los nombres de los genes -----
myAnnotation <- getGenesAnnotation(rownames(countsMatrix), attributes = "external_gene_name")
# En myAnnotation no están todos los genes de countsMatrix, pero si la mayoría
dim(myAnnotation) #24747
dim(countsMatrix) #24983
# Quitamos duplicados
myAnnotation <- unique(myAnnotation)
dim(myAnnotation)
countsMatrix2 <- countsMatrix[rownames(countsMatrix) %in% myAnnotation$ensembl_gene_id,]
dim(countsMatrix2)
rownames(countsMatrix2) <- myAnnotation$external_gene_name
write.csv2(labels, file = paste0("higado_", "genes_labels.csv"), row.names = F)
write.csv2(countsMatrix2, file = paste0("higado_", "genes_countsMatrix.csv"))
write.csv2(labels, file = paste0("..\..\higado_", numero_de_genes, "genes_labels.csv"), row.names = F)
write.csv2(DEGsMatrix, file = paste0("..\..\higado_", numero_de_genes, "genes_DEGsMatrix.csv"))
write.csv2(labels, file = paste0("..\\..\\higado_", numero_de_genes, "genes_labels.csv"), row.names = F)
write.csv2(DEGsMatrix, file = paste0("..\\..\\higado_", numero_de_genes, "genes_DEGsMatrix.csv"))
write.csv2(labels, file = paste0("..\\..\\higado_", "genes_labels.csv"), row.names = F)
write.csv2(countsMatrix2, file = paste0("..\\..\\higado_", "genes_countsMatrix.csv"))
# ----- Semilla aleatoria para reproducibilidad -----
rm(list = ls())
set.seed(31415)
# Número de genes a seleccionar
numero_de_genes <- 200
# ----- Ruta de trabajo -----
# # Windows
# setwd("C:/Users/dredondo/Dropbox/Pública/Archivos - Máster Ciencia de Datos/asignaturas_hechas")
#
# # Mac
# #setwd("/Users/daniel/Dropbox/Transporte_interno/Máster/Ciencia de Datos/")
#
# # Carpeta de datos
# setwd("TFM/Analisis_higado/data/")
setwd("analisis_higado_data")
# ----- Carga de paquetes -----
# Instalación de KnowSeq: (es una versión fija de GitHub)
# devtools::install_github("CasedUgr/KnowSeq", ref = "f59cb9e1cb02702697c208cf2c61c45d6e0b7a08", force = TRUE)
# Si hay problemas del tipo "Error: (converted from warning)" : Sys.setenv(R_REMOTES_NO_ERRORS_FROM_WARNINGS="true")
library(KnowSeq)     # Para trabajar con datos de transcriptómica de GDC Portal
library(dplyr)       # Para select, filter, pipes, ...
library(tictoc)      # Para medir tiempos con tic() y toc() a lo MATLAB
library(beepr)       # Para avisar con beeps cuando acaba un proceso
library(caret)       # Para machine learning
library(e1071)       # Para SVM
library(gplots)      # Para heatmaps
library(reshape2)    # Para melt
library(ggalluvial)  # Para diagrama de Sankey
# ----- Preprocesamiento para adecuar ficheros a KnowSeq -----
# Lectura de sample_sheet
samplesInfo <- read.table("gdc_sample_sheet.2020-06-11.tsv", sep = "\t", header = T)
# Se elimina ".counts.gz" de samplesInfo, porque countsToMatrix luego añade la extensión
samplesInfo[,2] <- as.character(samplesInfo[,2])
for(i in 1:nrow(samplesInfo)){
samplesInfo[i,2] <- substr(samplesInfo[i,2], 1, nchar(samplesInfo[i, 2]) - 10)
}
# Comprobación de importación correcta
head(samplesInfo)
# Definición de parámetros
Run <- samplesInfo$File.Name
Path <- samplesInfo$File.ID
Class <- samplesInfo$Sample.Type
table(Class)
# Los casos que no son "Primary Tumor" o "Solid Tissue Normal" se eliminan de:
#    - El fichero gdc_sample_sheet
#    - El fichero gdc_manifest
#    - La carpeta de gdc_download
Path[which(Class %in% c("Metastatic", "Recurrent Tumor"))]
# Creación de dataframe
SamplesDataFrame <- data.frame(Run, Path, Class)
# Exportación a CSV de SamplesDataFrame
setwd(dir = "gdc_download/")
write.csv(SamplesDataFrame, file = "03_SamplesDataFrame.csv")
# ----- Unificación de ficheros en formato matriz -----
tic("countsToMatrix") # 85 segundos
countsInformation <- countsToMatrix("03_SamplesDataFrame.csv", extension = "counts")
toc()
# ----- La matriz de cuentas y las etiquetas se guardan -----
countsMatrix <- countsInformation$countsMatrix
labels <- countsInformation$labels
# ----- Se descargan los nombres de los genes -----
myAnnotation <- getGenesAnnotation(rownames(countsMatrix), attributes = "external_gene_name")
# En myAnnotation no están todos los genes de countsMatrix, pero si la mayoría
dim(myAnnotation) #24747
dim(countsMatrix) #24983
# Quitamos duplicados
myAnnotation <- unique(myAnnotation)
dim(myAnnotation)
countsMatrix2 <- countsMatrix[rownames(countsMatrix) %in% myAnnotation$ensembl_gene_id,]
dim(countsMatrix2)
rownames(countsMatrix2) <- myAnnotation$external_gene_name
write.csv2(labels, file = paste0("..\\..\\higado_labels.csv"), row.names = F)
write.csv2(countsMatrix2, file = paste0("..\\..\\higado_", "genes_countsMatrix.csv"))
# ----- Cálculo de matriz de expresión de genes -----
tic("calculateGeneExpressionValues") # 82 segundos
expressionMatrix <- calculateGeneExpressionValues(countsMatrix, myAnnotation, genesNames = TRUE)
toc()
# ----- Controlando por el efecto batch -----
# tic("batchEffectRemoval") # 230 segundos
# svaMod <- batchEffectRemoval(expressionMatrix, as.factor(labels), method = "sva")
# toc()
# # ----- Total - Extracción de DEG (Expresión Diferencial de Genes) -----
#
# tic("DEGsExtraction") # 13 segundos
# DEGsInformation <- DEGsExtraction(expressionMatrix[-557,], as.factor(labels),
#                                   # p-valor
#                                   pvalue = 0.001)
# toc()
#
# # Número de genes extraídos: 5691
# print(nrow(DEGsInformation$DEG_Results$DEGs_Matrix))
#
# topTable <- DEGsInformation$DEG_Results$DEGs_Table
# DEGsMatrix <- DEGsInformation$DEG_Results$DEGs_Matrix
#
# write.csv2(labels, file = "../../../shiny/datos/labels.csv", row.names = F)
# write.csv2(DEGsMatrix, file = "../../../shiny/datos/DEGsMatrix.csv")
# ----- Sólo 200 genes - Extracción de DEG (Expresión Diferencial de Genes) -----
tic("DEGsExtraction") # 13 segundos
DEGsInformation <- DEGsExtraction(expressionMatrix, as.factor(labels),
# p-valor
#pvalue = 0.001,
number = numero_de_genes)
toc()
# Número de genes extraídos
print(nrow(DEGsInformation$DEG_Results$DEGs_Matrix))
topTable <- DEGsInformation$DEG_Results$DEGs_Table
DEGsMatrix <- DEGsInformation$DEG_Results$DEGs_Matrix
write.csv2(labels, file = paste0("..\\..\\higado_labels.csv"), row.names = F)
write.csv2(DEGsMatrix, file = paste0("..\\..\\higado_", numero_de_genes, "genes_DEGsMatrix.csv"))
myAnnotation <- getGenesAnnotation(rownames(countsMatrix))
# En myAnnotation no están todos los genes de countsMatrix, pero si la mayoría
dim(myAnnotation) #24747
dim(countsMatrix) #24983
# Quitamos duplicados
myAnnotation_names <- unique(myAnnotation[,1:2])
dim(myAnnotation_names)
countsMatrix2 <- countsMatrix[rownames(countsMatrix) %in% myAnnotation_names$ensembl_gene_id,]
dim(countsMatrix2)
rownames(countsMatrix2) <- myAnnotation_names$external_gene_name
write.csv2(labels, file = paste0("..\\..\\higado_labels.csv"), row.names = F)
write.csv2(countsMatrix2, file = paste0("..\\..\\higado_", "genes_countsMatrix.csv"))
tic("calculateGeneExpressionValues") # 82 segundos
expressionMatrix <- calculateGeneExpressionValues(countsMatrix, myAnnotation, genesNames = TRUE)
toc()
tic("DEGsExtraction") # 13 segundos
DEGsInformation <- DEGsExtraction(expressionMatrix, as.factor(labels),
# p-valor
#pvalue = 0.001,
number = numero_de_genes)
toc()
# Número de genes extraídos
print(nrow(DEGsInformation$DEG_Results$DEGs_Matrix))
topTable <- DEGsInformation$DEG_Results$DEGs_Table
DEGsMatrix <- DEGsInformation$DEG_Results$DEGs_Matrix
write.csv2(labels, file = paste0("..\\..\\higado_labels.csv"), row.names = F)
write.csv2(DEGsMatrix, file = paste0("..\\..\\higado_", numero_de_genes, "genes_DEGsMatrix.csv"))
